package main

import (
	"fmt"
)

/*

The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

*/

func numDivisors(n int) int {
	if n%2 == 0 {
		n /= 2
	}
	divisors, count := 1, 0
	for n%2 == 0 {
		count++
		n /= 2
	}
	divisors = divisors * (count + 1)
	for p := 3; n != 1; p += 2 {
		count = 0
		for n%p == 0 {
			count++
			n /= p
		}
		divisors = divisors * (count + 1)
	}
	return divisors
}

func findTriangleIndex(limit int) int {
	n := 1
	lnum, rnum := numDivisors(n), numDivisors(n+1)
	for lnum*rnum < 500 {
		n++
		lnum, rnum = rnum, numDivisors(n+1)
	}
	return n
}

func run012() {
	fmt.Print("012: ")

	index := findTriangleIndex(500)
	triangle := (index * (index + 1)) / 2

	fmt.Printf("First triangle number with over 500 divisors: %d", triangle)
}
